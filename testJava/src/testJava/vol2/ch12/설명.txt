
작업 스레드 생성과 실행

-> java.lang.Thread 클래스를 직접 객체화해서 생성해도 되지만,
Thread 를 상속해서 하위 클래스를 만들어 생성할 수도 있다

********************
1. Thread 클래스로부터 직접 생성

Thread thread = new Thread(Runnable target)

Runnable 은 작업 스레드가 실행할 수 있는 코드를 가지고 있는 객체라고 해서 붙여진 이름

Runnable 은 인터페이스 타입이기 때문에 구현 객체를 만들어 대입해야 한다

    class Task implements Runnable {
        public void run() {
                    스레드가 실행할 코드
        }
    }


Runnable 은 작업 내용을 가지고 있는 객체이지 실제 스레드는 아니다

Runnable 구현 객체를 생성한 후, 이것을 매개값으로 해서 Thread 생성자를 호출하면 비로소
작업 스레드가 생성된다

Runnable task = new Task();

Thread thread = new Thread(task);


코드를 절약하기 위해 Thread 생성자를 호출할 때 Runnable 익명 객체를 매개값으로 사용할 수 있다
오히려 이 방법이 더 많이 사용된다.
(익명 구현 객체)

    Thread thread = new Thread(new Runnable() {
    
        public void run() {}
                    스레드가 실행할 코드;
        }
    
    );


[자바 8 : 람다식을 매개값으로 사용할 수도 있다]


작업 스레드는 즉시 실행되는 것이 아니라, start() 메소드를 다음과 같이 호출해야만 비로소 실행

thread.start();

start() 메소드가 호출되면, 작업 스레드는 매개값으로 받은 Runnable 의 run() 메소드를 실행하면서
자신의 작업을 처리한다


------------------------------------------------------------

0.5 초 주기로 beep 음을 발생시키면서 동시에 프린팅하는 작업 - 가정

BeepPrintExample1 -> 메인스레드는 비프음을 모두 발생한 다음
프린팅을 시작한다

비프음을 발생시키면서 동시에 프린팅을 하려면 두 작업 중 하나를
메인 스레드가 아닌 다른 스레드에서 실행시켜야 한다


------------------------------------------------------------

********************
2. Thread 하위 클래스로부터 생성

작업 스레드가 실행할 작업을 Runnable 로 만들지 않고, Thread의 하위 클래스로 작업 스레드를
정의하면서 작업 내용을 포함시킬수도 있다

Thread 클래스를 상속한 후 run 메소드를 재정의(overriding) 해서 스레드가 실행할 코드를 작성


    public class WorkThread extends Thread() {
        @Override
        public void run() {
            // 스레드가 실행할 코드
        }
    }


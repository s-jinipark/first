
12.6 스레드 상태 제어

멀티 스레드 프로그램을 만들기 위해서는 정교한 스레드 상태 제어가 필요

상태 제어가 잘못되면 프로그램은 불안정해져서 먹통이 되거나 다운된다
(멀티 스레드 프로그래밍이 어렵다고 하는 이유)

스레드 제어를 제대로 하기 위해서는 스레드의 상태 변화를 가져오는 메소드들을
파악하고 있어야 한다

일시정지  ---- interrupt()  -----> 실행 대기
               notify()              ↑    |
               notifyAll()           |    |
               resume() - X      yield()  |
                                     |    ↓ 
               sleep()
(일시정지)<---- join()       ------   실행  ----- stop() - X ---> 종료
               wait()
               suspend() - X

(resume, suspend, stop 은 스레드의 안전성을 해친다고 하여 더 이상
사용하지 않도록 권장된 Deprecated...) 

메소드         설명
-----------------------------------------------------------------

interrupt()         일시 정지 상태의 스레드에서 InterruptedException 예외를 발생시켜,
                    예외처리 코드(catch) 에서 실행 대기 상태로 가거나 종료 상태로
                    갈 수 있도록 한다

notify()            동기화 블록 내에서 wait() 메소드에 의해 일시 정지 상태에 있는
notifyAll()         스레드를 실행 대기 상태로 만든다

resume()            suspend() 메소드에 의해 일시 정지 상태에 있는 스레드를 실행 대기
                    상태로 만든다
                    Deprecated (대신 notify.. 사용)

sleep(long millis)  주어진 시간 동안 스레드를 일시 정지 상태로 만든다
                    주어진 시간이 지나면 자동적으로 실행 대기 상태가 된다
sleep(long millis, int nanos)

join()              join() 메소드를 호출한 스레드는 일시 정지 상태가 된다
join(long millis)   실행 대기 상태로 가려면, join() 메소드를 멤버로 가지는 스레드가
                    종료되거나, 매개값으로 주어진 시간이 지나야 한다
join(long millis, int nanos)

wait()              동기화(synchronized)블록 내에서 스레드를 일시 정지 상태로 만든다
wait(long millis)   매개값으로 주어진 시간이 지나면 자동적으로 실행 대기상태가 된다
                    시간이 주어지지 않으면 notify(), notifyAll() 메소드에 의해 
                    실행 대기 상태로 갈 수 있다
wait(long millis, int nanos)

suspend()           스레드를 일시 정지 상태로 만든다
                    Deprecated (대신 wait.. 사용)

yield()             실행중에 우선 순위가 동일한 다른 스레드에게 실행을 양보하고
                    실행 대기 상태가 된다

stop()              스레드를 즉시 종료시킨다
                    Deprecated
-----------------------------------------------------------------


* 다른 스레드에게 실행 양보( yield() )
YeildExample.java

* 다른 스레드위 종료를 기다림( join() )
스레드는 다른 스레드와 독립적으로 실행하는 것이 기본이지만
다른 스레드가 종료될 때까지 기다렸다가 실행해야 하는 경우가 발생할 수도 있다
(예를 들어 계산 작업...)
JoinExample.java

ThreadA                         ThreadB
-------                         -------

threadB.start();  -----(1)-----> run() {
threadB.join();   // 일시 정지     ↓ (2)
                  <------------  }
               ↓ (3)
               

* 스레드 간 협업( wait(), notify(), notifyAll() )
경우에 따라 두 개의 스레드를 교대로 번갈아가며 실행해야 할 경우가 있다.
이 방법의 핵심은 공유 객체에 있다.

이 메소드들은 Object 클래스에 선언된 메소드이므로 모든 공유 객체에서 호출이 가능

주의할 점은 이 메소드들은 동기화 메소드 또는 동기화 블록 내에서만 사용할 수 있다

WaitNotifyExample.java


다음 예제는 데이터를 저장하는 스레드

